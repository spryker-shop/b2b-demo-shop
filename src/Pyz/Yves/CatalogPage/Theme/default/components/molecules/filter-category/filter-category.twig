{% extends molecule('filter-category', '@SprykerShop:CatalogPage') %}

{% define config = {
    name: 'filter-category',
    tag: 'filter-category',
} %}

{% define data = {
    levelMenu: 1,
} %}

{% define attributes = {
    'wrapper-class-name': config.name ~ '__menu--lvl-1',
    'parent-class-name': config.name ~ '__menu-item--lvl-1',
    'active-category-class-name': 'js-' ~ config.name ~ '__menu-item',
    'visible-category-class': config.name ~ '__menu-item',
    'class-to-remove': 'is-hidden-lg-xxl',
} %}

{% block body %}
    <ul class="{{ config.name }}__menu {{ config.name }}__menu--lvl-{{ data.levelMenu }}">
        {% for categoryNode in data.categories %}
            {% set quantity = 0 %}
            {% set hasChildren = categoryNode.children is defined and categoryNode.children is not empty %}

            {% for filterValue in data.filter.values %}
                {% if filterValue.value == categoryNode.nodeId %}
                    {% set quantity = filterValue.docCount %}
                {% endif %}
            {% endfor %}

            {% if quantity > 0 or (quantity == 0 and data.isEmptyCategoryFilterValueVisible) %}
                {% if data.filterPath is not empty %}
                    {% set currentUrl = url(data.filterPath, {categoryPath: (app.request.attributes.get('categoryPath'))}) %}
                {% else %}
                    {% set currentUrl = app.request.attributes.get('categoryNode') ? app.request.attributes.get('categoryNode').url : null %}
                {% endif %}

                {% set categoryUrl = data.filterPath is not empty ? url(data.filterPath, {categoryPath: (categoryNode.url | trimLocale)}) : categoryNode.url %}
                {% set isActive = (currentUrl == categoryUrl) %}
                {% set isHidden = (data.levelMenu != 1 and data.isEmptyCategoryFilterValueVisible) %}
                {% set disableAttribute = quantity == 0 ? 'disabled' %}
                {% set menuItemActiveClass = isActive ? config.name ~ '__menu-item--active ' ~ config.jsName ~ '__menu-item' %}
                {% set menuItemHiddenClass = isHidden ? 'is-hidden-lg-xxl' %}
                {% set menuLinkActiveClass = isActive ? config.name ~ '__menu-link--active' %}
                {% set linkTextActiveClass = isActive ? config.name ~ '__link-text--active' %}
                {% set triggerButtonJsName = data.parentJsName ? data.parentJsName ~ '__trigger' %}

                {% set categoryNamePrepared = categoryNode.name | replace({'[^a-zA-Z0-9]': '_'}) %}
                {% set childrenClass = categoryNode.hasChildren ? 'menu__item--has-children-list' %}
                {% set triggerClassName = config.jsName ~ '__category-trigger-' ~ categoryNamePrepared %}
                {% set targetCategoryClassName = config.jsName ~ '__category-target-' ~ categoryNamePrepared %}
                {% set targetTogglerClassName = config.jsName ~ '__toggler-target-' ~ categoryNamePrepared %}
                {% set classToToggle = config.name ~ '__category-target' %}
                {% set categoryTargetInner = config.name ~ '__category-target-inner' %}
                {% set classToToggleModifier = classToToggle ~ '--hidden' %}
                {% set toggleButtonClassName = config.name  ~ '__category-toggle-button' %}

                <li class="{{ config.name }}__menu-item {{ config.name }}__menu-item--lvl-{{ data.levelMenu }} {{ menuItemActiveClass }}">
                    {% if hasChildren %}
                        {% block categoryItemToggler %}
                            <div>
                                {% block categoryItemTogglerIcon %}
                                    <button type="button" class="spacing-right--small {{ toggleButtonClassName }} {{ triggerClassName }} {{ targetTogglerClassName }}">
                                        {% include atom('icon') with {
                                            class: config.name ~ '__category-toggle-button-icon',
                                            modifiers: ['small'],
                                            data: {
                                                name: 'caret-down',
                                            },
                                        } only %}
                                    </button>
                                {% endblock %}

                                {% block categoryItemTogglerHandlers %}
                                    {% include molecule('toggler-click') with {
                                        attributes: {
                                            'trigger-class-name': triggerClassName,
                                            'target-class-name': targetCategoryClassName,
                                            'class-to-toggle': classToToggleModifier,
                                        },
                                    } only %}

                                    {% include molecule('toggler-click') with {
                                        attributes: {
                                            'trigger-class-name': triggerClassName,
                                            'target-class-name': targetTogglerClassName,
                                            'class-to-toggle': toggleButtonClassName ~ '--collapsed',
                                        },
                                    } only %}
                                {% endblock %}
                            </div>
                        {% endblock %}
                    {% endif %}

                    <div class="{{ config.name }}__category-row {{ not hasChildren ? config.name ~ '__category-row--no-children' }}">
                        <button class="{{ config.name }}__menu-link {{ config.name }}__menu-link--lvl-{{ data.levelMenu }} {{ menuLinkActiveClass }} {{ triggerButtonJsName }}" type="button" {{ disableAttribute }} data-url={{ categoryUrl }} data-name="{{ categoryNode.name }}">
                            <span class="{{ config.name }}__link-text {{ linkTextActiveClass }}">{{ categoryNode.name }}</span> <span>{{ quantity | executeFilterIfExists('formatInt', app.locale) }}</span>
                        </button>

                        {% if hasChildren %}
                            <div class="{{ classToToggle }} {{ targetCategoryClassName }}">
                                <div class="{{ categoryTargetInner }}">
                                    {% include molecule('filter-category', 'CatalogPage') with {
                                        data: {
                                            filter: data.filter,
                                            filterPath: data.filterPath,
                                            categories: categoryNode.children,
                                            levelMenu: data.levelMenu + 1,
                                            parentJsName: data.parentJsName,
                                            isEmptyCategoryFilterValueVisible: data.isEmptyCategoryFilterValueVisible,
                                        },
                                    } only %}
                                </div>
                            </div>
                        {% endif %}
                    </div>
                </li>
            {% endif %}
        {% endfor %}
    </ul>
{% endblock %}
