{% extends model('component') %}
{% import _self as component %}

{% define config = {
    name: 'product-card-item',
    tag: 'article',
} %}

{% define data = {
    list: {},
    listItem: required,
    attributes: [],
    options: [],
    canEdit: false,
    canRemove: false,
    quantity: null,
    imageModifiers: [],
    priceModifiers: ['medium'],
    isShoppingList: false,
    currencyIsoCode: null,
} %}

{% define attributes = {
    itemscope: '',
    itemtype: 'https://schema.org/Product',
} %}

{% set listItem = data.listItem %}

{% block body %}
    {% set amountSalesUnit = listItem.amountSalesUnit ?? null %}
    {% set quantitySalesUnit = listItem.quantitySalesUnit ?? null %}

    <div class="grid grid--stretch grid--gap">
        <div class="{{ component.renderClass(config.name ~ '__col', modifiers, config.name ~ '__col--image') }} col">
            {% block image %}
                {% set imageUrl = listItem.images[0].externalUrlLarge ?? '' %}

                {% if listItem.url ?? false %}
                    <a itemprop="url" href="{{ listItem.url }}" title="{{ listItem.name }}">
                        {% include molecule('product-item-image') with {
                            modifiers: data.imageModifiers,
                            data: {
                                name: listItem.name | default,
                                image: imageUrl,
                            },
                        } only %}
                    </a>
                {% else %}
                    {% include molecule('product-item-image') with {
                        class: 'spacing-y spacing-y--inner spacing-y--reset',
                        modifiers: data.imageModifiers,
                        data: {
                            name: listItem.name | default,
                            image: imageUrl,
                        },
                    } only %}
                {% endif %}
            {% endblock %}
        </div>

        {% block productDescription %}
            <div class="{{ component.renderClass(config.name ~ '__col', modifiers, config.name ~ '__col--description') }} col">
                <div class="grid grid--stretch grid--gap {{ config.name }}__inner {{ config.name }}__inner--full-height">
                    {% block productDescriptionContent %}
                        <div class="{{ component.renderClass(config.name ~ '__col', modifiers, config.name ~ '__col--content') }} col">
                            {% block productCharacteristics %}
                                {% block title %}
                                    <div>
                                        <a href="{{ listItem.url }}" class="{{ component.renderClass(config.name ~ '__title', modifiers) }} title title--h6" title="{{ listItem.name }}" itemprop="name">{{ listItem.name }}</a>
                                    </div>
                                {% endblock %}

                                {% block info %}
                                    <div class="spacing-bottom">
                                        <small class="text-secondary">{{ 'cart.item.sku' | trans }}: <span itemprop="sku">{{ listItem.sku }}</span></small>
                                    </div>
                                {% endblock %}

                                {% block productConfiguration %}
                                    {% widget 'ProductConfigurationCartItemDisplayWidget' args [listItem] only %}{% endwidget %}

                                    {% if data.canEdit %}
                                        {% widget 'ProductConfigurationCartPageButtonWidget' args [listItem] only %}{% endwidget %}
                                    {% endif %}
                                {% endblock %}

                                {% block productInfo %}
                                    {% block quantityTitle %}
                                        {% if data.quantity is not empty and amountSalesUnit is empty %}
                                            <div class="grid grid--middle grid--gap {{ config.name }}__quantity">
                                                <div class="col">
                                                    <span class="{{ config.name }}__quantity-title">{{ 'cart.item_quantity' | trans }}:</span> {{ data.quantity | executeFilterIfExists('formatInt', app.locale) }}
                                                </div>
                                                {% block subQuantity %}{% endblock %}
                                            </div>
                                        {% endif %}
                                    {% endblock %}

                                    {% block packagingUnitCart %}
                                        {% set hasSubQuantity = false %}
                                        {% set hasAmountPerQuantity = false %}

                                        {% if amountSalesUnit is not empty %}
                                            {% block packagingUnitCartContent %}
                                                {% include molecule('packaging-unit-cart', 'ProductPackagingUnitWidget') with {
                                                    data: {
                                                        amount: listItem.amount,
                                                        quantity: listItem.quantity,
                                                        quantitySalesUnit: listItem.quantitySalesUnit,
                                                        quantityConversion: listItem.quantitySalesUnit.conversion | default(null),
                                                        quantityProductMeasurementUnit: listItem.quantitySalesUnit.productMeasurementUnit | default(null),
                                                        amountSalesUnit: listItem.amountSalesUnit,
                                                        amountConversion: listItem.amountSalesUnit.conversion,
                                                        amountProductMeasurementUnit: listItem.amountSalesUnit.productMeasurementUnit,
                                                        amountValue: listItem.amountSalesUnit.value,
                                                        hasSubQuantity: hasSubQuantity,
                                                        hasAmountPerQuantity: hasAmountPerQuantity,
                                                    },
                                                } only %}
                                            {% endblock %}
                                        {% endif %}
                                    {% endblock %}

                                    {% block salesInfo %}
                                        {% set isAmountEmpty = amountSalesUnit is empty and quantitySalesUnit is not empty and data.quantity is empty %}

                                        {% if isAmountEmpty %}
                                            <div class="{{ config.name }}__quantity grid grid--middle">
                                                <div class="col">{{ 'packaging_units.cart.quantity' | trans }}: </div>
                                                <div class="col col--expand">
                                                    {% set cartProductMeasurementUnitQuantitySelectorWidget = findWidget('CartProductMeasurementUnitQuantitySelectorWidget', [listItem]) %}

                                                    {% if cartProductMeasurementUnitQuantitySelectorWidget and data.canEdit %}
                                                        {% widget cartProductMeasurementUnitQuantitySelectorWidget only %}{% endwidget %}
                                                    {% else %}
                                                        {% include molecule('product-item-quantity') with {
                                                            data: {
                                                                productItem: listItem,
                                                                isDisabled: not data.canEdit,
                                                            },
                                                        } only %}
                                                    {% endif %}
                                                </div>
                                            </div>
                                        {% endif %}
                                    {% endblock %}

                                    {% block itemAttributes %}
                                        {% if data.attributes is not empty %}
                                            {% include molecule('product-item-variant-selector') with {
                                                data: {
                                                    productItem: listItem,
                                                    productItemAttributes: data.attributes,
                                                    canEdit: data.canEdit,
                                                },
                                            } only %}
                                        {% endif %}
                                    {% endblock %}

                                    {% block bundle %}
                                        {% widget 'ProductBundleCartItemsListWidget' args [listItem, data.list] only %}
                                        {% endwidget %}
                                    {% endblock %}
                                {% endblock %}
                            {% endblock %}

                            {% block additionalInfo %}
                                {% block note %}
                                    {% widget 'CartItemNoteFormWidget' args [listItem, data.list] only %}{% endwidget %}
                                {% endblock %}

                                {% block productOptions %}
                                    {% if listItem.productOptions ?? false %}
                                        {% include molecule('product-item-options') with {
                                            modifiers: modifiers,
                                            data: {
                                                productItem: listItem,
                                            },
                                        } only %}
                                    {% endif %}

                                    {% if data.options %}
                                        {% include molecule('product-item-options') with {
                                            data: {
                                                options: data.options,
                                            },
                                        } only %}
                                    {% endif %}
                                {% endblock %}
                            {% endblock %}
                        </div>
                        <div class="{{ component.renderClass(config.name ~ '__col', modifiers, config.name ~ '__col--total') }} col">
                            <div class="{{ config.name }}__inner {{ config.name }}__inner--full-height {{ config.name }}__inner--actions grid grid--column grid--justify-column">
                                {% block productTotal %}
                                    <div class="col col--sm-12">
                                        <div class="{{ config.name }}__inner {{ config.name }}__inner--total grid grid--column">
                                            {% block price %}
                                                {% set price = listItem.unitPrice is defined ? listItem.unitPrice : listItem.price %}
                                                {% set originalAmount = listItem.prices.ORIGINAL ?? null %}

                                                {% include molecule('money-price') with {
                                                    modifiers: data.priceModifiers,
                                                    data: {
                                                        amount: price,
                                                        originalAmount: originalAmount,
                                                        currencyIsoCode: data.currencyIsoCode,
                                                    },
                                                } only %}
                                            {% endblock %}

                                            {% block quantity %}
                                                {% set isAmountSalesUnitEmpty = amountSalesUnit is empty and quantitySalesUnit is empty and data.quantity is empty %}

                                                {% if isAmountSalesUnitEmpty %}
                                                    <div class="{{ config.name }}__quantity-holder">
                                                        {% include molecule('product-item-quantity') with {
                                                            data: {
                                                                productItem: listItem,
                                                                isDisabled: not data.canEdit,
                                                            },
                                                        } only %}
                                                    </div>
                                                {% endif %}
                                            {% endblock %}

                                            {% block totalPrice %}{% endblock %}

                                            {% block state %}
                                                {% set itemState = listItem.state is defined ? listItem.state %}

                                                {% if itemState %}
                                                    {% set state = itemState.name | replace({' ': '-'}) | lower %}
                                                    {% set stateLabel = itemState.displayName ?? ('oms.state.' ~ state) %}

                                                    {% include molecule('status') with {
                                                        data: {
                                                            label: stateLabel | trans,
                                                            status: state,
                                                        },
                                                    } only %}
                                                {% endif %}
                                            {% endblock %}
                                        </div>
                                    </div>

                                    {% block deleteButton %}
                                        {% if data.canRemove %}
                                            {% widget 'RemoveFromCartFormWidget' args [listItem] with {
                                                embed: {
                                                   configName: config.name,
                                                },
                                            } only %}
                                                {% block embeddedData %}
                                                    <div class="col {{ embed.configName }}__delete-cart">
                                                        <button class="link link--icon" title="{{ 'cart.delete.item' | trans }}" data-init-single-click>
                                                            {% include atom('icon') with {
                                                                modifiers: ['link'],
                                                                data: {
                                                                    name: 'delete',
                                                                },
                                                            } only %}
                                                            <span class="is-hidden-sm-md">{{ 'cart.delete.item' | trans }}</span>
                                                        </button>
                                                    </div>
                                                {% endblock %}
                                            {% endwidget %}
                                        {% endif %}
                                    {% endblock %}
                                {% endblock %}
                            </div>
                        </div>
                    {% endblock %}
                </div>
            </div>
        {% endblock %}
    </div>
{% endblock %}
