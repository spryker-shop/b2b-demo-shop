{% extends view('pdp-product-packaging-unit', '@SprykerShop:ProductPackagingUnitWidget') %}

{% block body %}
    {% set isAddToCartDisabled = data.isAddToCartDisabled ? 'disabled' %}

    <div class="product-packaging-new-price price is-hidden" id="product-packaging-new-price-block">
        <div class="spacing-right">{{ 'measurement_units.new-price' | trans }}:</div>
        <div class="price__amount price__amount--pdp" id="product-packaging-new-price-value-block"></div>
    </div>
    <input id="item-base-price" type="hidden" value="{{ data.product.price }}">
    <input id="item-money-symbol" type="hidden" value="{{  moneySymbol() }}">

    {% set salesUnitCount = data.salesUnits | length %}
    {% set hasQuantityRow = salesUnitCount > 1 and data.isSelfLead == false %}

    {% if salesUnitCount %}
        {% set isQuantityRowJustify = hasQuantityRow ? 'grid--justify' %}

        <div class="grid grid--middle {{ isQuantityRowJustify }}">
            <div class="col measurement-unit">
                <div class="measurement-unit__label">{{ 'packaging_units.pdp.quantity' | trans }}:</div>
                <div class="measurement-unit__value">
                    {% embed molecule('quantity-counter') with {
                        modifiers: ['right-space'],
                        attributes: {
                            id: 'sales-unit-quantity',
                            value: data.minQuantityInSalesUnits,
                            name: 'sales-unit-quantity',
                        },
                    } only %}
                        {% block inputClass %}js-volume-price__quantity {{ config.name }}__input--medium-width{% endblock %}
                    {% endembed %}

                    <input id="base-unit-quantity" type="hidden" value="{{ data.minQuantityInBaseUnit }}" name="quantity">
                </div>
            </div>

            {% if hasQuantityRow %}
                <div class="col col--sm-12 col--md-auto col--lg-12 col--xxl-auto measurement-unit">
                    <div class="measurement-unit__label">{{ 'packaging_units.pdp.sales-units' | trans }}:</div>
                    <div class="measurement-unit__value">
                        {% embed molecule('custom-select') with {
                            modifiers: ['small'],
                            attributes: {
                                name: 'id-product-measurement-sales-unit',
                                'config-theme': 'small',
                            },
                            embed: {
                                salesUnits: data.salesUnits,
                            },
                        } only %}
                            {% block selectClass %}{{ parent() }} select-measurement-unit{% endblock %}

                            {% block options %}
                                {% for salesUnit in embed.salesUnits %}
                                    {% set isSalesUnitSelected = salesUnit.isDefault ? 'selected' %}

                                    <option value="{{ salesUnit.idProductMeasurementSalesUnit }}" {{ isSalesUnitSelected }}>{{ salesUnit.productMeasurementUnit.name | trans }}</option>
                                {% endfor %}
                            {% endblock %}
                        {% endembed %}
                    </div>
                </div>
            {% endif %}

            {% if salesUnitCount == 1 and data.isSelfLead == false %}
                <div class="col measurement-unit">
                    <div class="measurement-unit__value">{{ data.salesUnits[0].productMeasurementUnit.name | trans }}</div>
                    <input type="hidden" name="id-product-measurement-sales-unit" value="{{ data.salesUnits[0].idProductMeasurementSalesUnit }}">
                </div>
            {% endif %}
        </div>
    {% endif %}

    {% if not salesUnitCount %}
        <div class="grid grid--stretch grid--justify">
            {% embed molecule('quantity-counter') with {
                modifiers: ['right-space'],
            } only %}
                {% block inputClass %}js-volume-price__quantity{% endblock %}
            {% endembed %}

            <div class="col col--expand">
                <button type="submit" id="add-to-cart-button" class="button button--alternative button--big button--expand button--no-horizontal-padding"
                        data-init-single-click {{ isAddToCartDisabled }} {{ qa('add-to-cart-button') }}>
                    {% include atom('icon') with {
                        modifiers: ['cart-plus'],
                        data: {
                            name: 'cart-plus',
                        },
                    } only %}
                    {{ 'page.detail.add-to-cart' | trans }}
                </button>
            </div>
        </div>
    {% endif %}

    <div class="text-small is-hidden measurement-unit-choice">
        <div class="measurement-unit-notifications">
            <div id="quantity-between-units" class="is-hidden">
                <span>{{ 'measurement_units.recommendation.between-units-info' | trans }} (<span id="current-choice"></span>)</span>
            </div>
            <div id="minimum-quantity" class="is-hidden">
                <span>{{ 'measurement_units.recommendation.min-violation' | trans }}</span>
            </div>
            <div id="maximum-quantity" class="is-hidden">
                <span>{{ 'measurement_units.recommendation.max-violation' | trans }}</span>
            </div>
        </div>

        <div id="measurement-unit-choices">
            <span>{{ 'measurement_units.recommendation.suggestion' | trans }}:</span>
            <div class="list measurement-unit-choice__list"></div>
        </div>
    </div>

    {% if data.productPackagingUnit and salesUnitCount %}
        {% set defaultAmount = (data.productPackagingUnit.amountMin and data.productPackagingUnit.defaultAmount.toFloat() < data.productPackagingUnit.amountMin.toFloat()) ?
            data.productPackagingUnit.amountMin :
            data.productPackagingUnit.defaultAmount %}
        {% set isAmountRowJustify = (salesUnitCount and data.leadProductSalesUnits | length > 1) ? 'grid--justify' %}

        <div class="grid grid--middle {{ isAmountRowJustify }}">
            <div class="col measurement-unit">
                <div class="measurement-unit__label">{{ 'packaging_units.pdp.amount' | trans }}:</div>
                <div class="measurement-unit__value">
                    {% embed molecule('quantity-counter') with {
                        modifiers: ['right-space'],
                        data: {
                            isDisabled: not data.isAmountVariable,
                        },
                        attributes: {
                            id: 'user-amount',
                            value: defaultAmount,
                            min: data.productPackagingUnit.amountMin,
                            max: data.productPackagingUnit.amountMax,
                            step: data.productPackagingUnit.amountInterval,
                            name: 'amount-sales-unit[' ~ data.product.sku ~ ']',
                        },
                    } only %}
                        {% block inputClass %}{{ config.name }}__input--medium-width{% endblock %}
                    {% endembed %}

                    <input id="default-amount" type="hidden" value="{{ defaultAmount }}">
                    <input id="amount" type="hidden" value="{{ defaultAmount }}" name="amount[{{ data.product.sku }}]">
                </div>
            </div>

            {% if salesUnitCount and data.leadProductSalesUnits | length > 1 %}
                <div class="col col--sm-12 col--md-auto col--lg-12 col--xxl-auto measurement-unit">
                    <div class="measurement-unit__label">{{ 'packaging_units.pdp.sales-units' | trans }}:</div>
                    <div class="measurement-unit__value">
                        {% embed molecule('custom-select') with {
                            modifiers: ['small'],
                            attributes: {
                                name: 'amount-id-product-measurement-sales-unit[' ~ data.product.sku ~ ']',
                                'config-theme': 'small',
                            },
                            embed: {
                                salesUnits: data.leadProductSalesUnits,
                            },
                        } only %}
                            {% block selectClass %}{{ parent() }} select-lead-measurement-unit{% endblock %}

                            {% block options %}
                                {% for salesUnit in embed.salesUnits %}
                                    {% set isSalesUnitSelected = salesUnit.isDefault ? 'selected' %}

                                    <option value="{{ salesUnit.idProductMeasurementSalesUnit }}" {{ isSalesUnitSelected }}>{{ salesUnit.productMeasurementUnit.name | trans }}</option>
                                {% endfor %}
                            {% endblock %}
                        {% endembed %}
                    </div>
                </div>
            {% endif %}

            {% if salesUnitCount and data.leadProductSalesUnits | length == 1 %}
                <div class="col measurement-unit">
                    <div class="measurement-unit__value">{{ data.leadProductSalesUnits[0].productMeasurementUnit.name | trans }}</div>
                    <input type="hidden" name="amount-id-product-measurement-sales-unit[{{ data.product.sku }}]" value="{{ data.leadProductSalesUnits[0].idProductMeasurementSalesUnit }}">
                </div>
            {% endif %}
        </div>
    {% endif %}

    {% if salesUnitCount %}
        {% include molecule('packaging-unit-quantity-selector', 'ProductPackagingUnitWidget') with {
            attributes: {
                json: data.jsonScheme,
            },
        } only %}

        <div class="text-small is-hidden packaging-unit-choice">
            <div class="packaging-unit-notifications">
                <div id="amount-between-units" class="is-hidden">
                    <span>{{ 'packaging_units.recommendation.between-units-info' | trans }} (<span id="amount-current-choice"></span>)</span>
                </div>
                <div id="packaging-amount-min" class="is-hidden">
                    <span>{{ 'packaging-units.recommendation.amount-min-violation' | trans }}</span>
                </div>
                <div id="packaging-amount-max" class="is-hidden">
                    <span>{{ 'packaging-units.recommendation.amount-max-violation' | trans }}</span>
                </div>
                <div id="packaging-amount-interval" class="is-hidden">
                    <span>{{ 'packaging-units.recommendation.amount-interval-violation' | trans }}</span>
                </div>
            </div>

            <div id="packaging-unit-choices">
                <span>{{ 'packaging_units.recommendation.suggestion' | trans }}</span>
                <ul class="list packaging-unit-choice__list"></ul>
            </div>
        </div>

        <button type="submit" id="add-to-cart-button" class="button button--alternative button--big button--expand button--no-horizontal-padding"
                data-init-single-click {{ isAddToCartDisabled }} {{ qa('add-to-cart-button') }}>
            {% include atom('icon') with {
                modifiers: ['cart-plus'],
                data: {
                    name: 'cart-plus',
                },
            } only %}
            {{ 'page.detail.add-to-cart' | trans }}
        </button>
    {% endif %}

    {% set translations = [] %}
    {% for key, salesUnit in data.salesUnits %}
        {% set translations = translations | merge({ (salesUnit.productMeasurementUnit.code) : (salesUnit.productMeasurementUnit.name | trans) }) %}
    {% endfor %}

    <script type="application/json" id="measurement-unit-translation">{{ translations | json_encode | raw }}</script>
{% endblock %}
