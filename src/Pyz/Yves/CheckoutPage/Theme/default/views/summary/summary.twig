{% extends view('summary', '@SprykerShop:CheckoutPage') %}

{% define data = {
    stepNumder: 4,
} %}

{% block content %}
    {% for shipmentGroup in data.shipmentGroups %}
        <article class="grid grid--gap spacing-bottom spacing-bottom--big">
            <h3 class="col col--sm-12 title title--second spacing-bottom spacing-bottom--small">
                {{ 'page.checkout.shipment.shipment_group_heading' | trans({
                    '%current%': loop.index,
                    '%total%': loop.length
                }) }}
            </h3>
            <div class="col col--sm-12 col--xl-8">
                {% widget 'QuoteConfiguredBundleWidget' args [data.cart, shipmentGroup.items] with {
                    data: {
                        isEditable: false,
                        isQuantityVisible: true,
                    },
                } only %}
                {% endwidget %}

                {% for item in shipmentGroup.cartItems %}
                    {% set cartItem = item.bundleProduct ?? item %}
                    {% set isConfiguredBundle = cartItem.configuredBundleItem is defined and cartItem.configuredBundleItem is not empty %}

                    {% if not isConfiguredBundle %}
                        {% embed molecule('product-card-item') with {
                            modifiers: ['checkout'],
                            data: {
                                listItem: cartItem,
                                quantity: cartItem.quantity,
                                priceModifiers: ['medium', 'block', 'margin-bottom-from-tablet'],
                            },
                            embed: {
                                bundleItems: item.bundleItems | default([]),
                            },
                        } only %}
                            {% block image %}
                                {% set imageUrl = data.listItem.images is not empty ? data.listItem.images[0].externalUrlLarge : null %}

                                {% include molecule('product-item-image') with {
                                    modifiers: ['small'],
                                    data: {
                                        name: data.listItem.name,
                                        image: imageUrl,
                                    },
                                } only %}
                            {% endblock %}

                            {% block title %}
                                <h6 class="{{ config.name }}__title spacing spacing--reset">{{ data.listItem.name }}</h6>
                            {% endblock %}

                            {% block packagingUnitCartContent %}
                                {% set hasSubQuantity = true %}

                                {{ parent() }}
                            {% endblock %}

                            {% block subQuantity %}
                                {% if data.listItem.quantitySalesUnit is not empty %}
                                    {% include atom('quantity-option') with {
                                        data: {
                                            value: data.listItem.quantitySalesUnit.value,
                                            precision: data.listItem.quantitySalesUnit.precision,
                                            optionName: data.listItem.quantitySalesUnit.productMeasurementUnit.name | trans,
                                        },
                                    } only %}
                                {% endif %}
                            {% endblock %}

                            {% block bundle %}
                                {% include molecule('bundle-items', 'ProductBundleWidget') ignore missing with {
                                    data: {
                                        items: embed.bundleItems,
                                    },
                                } only %}
                            {% endblock %}

                            {% block note %}
                                {% if data.listItem.cartNote is not empty %}
                                    {% include molecule('cart-item-note', 'CartNoteWidget') ignore missing with {
                                        data: {
                                            isNoteNotEmpty: true,
                                            canWrite: false,
                                            label: 'cart_note.checkout_page.quote_note',
                                            note: data.listItem.cartNote,
                                        },
                                    } only %}
                                {% endif %}
                            {% endblock %}
                        {% endembed %}
                    {% endif %}
                {% endfor %}
            </div>

            <div class="col col--sm-12 col--xl-4">
                {% include molecule('summary-sidebar', 'CheckoutPage') with {
                    data: {
                        shipmentGroup: shipmentGroup,
                        cart: data.cart,
                        shipmentExpenses: data.shipmentExpenses,
                    },
                } only %}
            </div>
        </article>
    {% endfor %}

    <div class="grid grid--gap">
        <div class="col col--sm-12 col--lg-6">
            {% include molecule('summary-item-box', 'CheckoutPage') with {
                modifiers: ['mobile-border-top'],
                data: {
                    title: 'checkout.step.summary.payment' | trans,
                    method: data.paymentMethod,
                    iconName: data.paymentMethod | lower,
                    editUrl: 'checkout-payment',
                    canEdit: true,
                },
            } only %}
        </div>
        <div class="col col--sm-12 col--lg-6">
            {% include molecule('summary-item-box', 'CheckoutPage') with {
                data: {
                    title: 'checkout.step.summary.billing_address' | trans,
                    address: data.billingAddress,
                    editUrl: 'checkout-address',
                    canEdit: true,
                },
            } only %}
        </div>
    </div>

    {% if data.cart.idQuote is not empty %}
        <div class="box box--medium">
            {% widget 'CommentThreadWidget' args [
                data.cart.idQuote,
                'quote',
                app.request.requestUri,
                data.cart.commentThread,
            ] only %}
            {% endwidget %}
        </div>
    {% endif %}

    {% if data.transfer.cartNote %}
        {% include molecule('note-list', 'CartNoteWidget') ignore missing with {
            data: {
                label: 'cart_note.checkout_page.quote_note',
                note: data.transfer.cartNote,
            },
        } only %}
    {% endif %}

    {% include molecule('summary-voucher-form', 'CheckoutPage') with {
        data: {
            transfer: data.transfer,
        },
    } only %}

    {% embed molecule('form') with {
        modifiers: ['checkout-form'],
        data: {
            form: data.forms.summary,
            acceptTermsFieldName: data.acceptTermsFieldName,
            submit: {
                enable: data.isPlaceableOrder and can('WriteSharedCartPermissionPlugin', data.cart.idQuote),
                text: 'checkout.step.place.order' | trans,
                class: 'form__action--expand-sm-md button button--big js-summary__submit-button',
            },
            cancel: {
                enable: true,
                url: data.backUrl,
                text: 'general.back.button' | trans,
                icon: '',
                class: 'form__action--expand-sm-md button button--big button--hollow-icon button--back',
            },
        },
        embed: {
            overview: data.overview,
            cart: data.cart,
            isPlaceableOrderErrors: data.isPlaceableOrderErrors,
        },
    } only %}
        {% block field %}
            {% if fieldName == data.acceptTermsFieldName %}
                {{ form_row(field, {
                    component: molecule('accept-terms-checkbox', 'CheckoutPage'),
                    label: field.vars.label,
                    rowAttr: {
                        class: 'spacing-bottom',
                    },
                    attributes: {
                        'target-class-name': 'js-summary__submit-button',
                    },
                }) }}
            {% else %}
                {{ parent() }}
            {% endif %}
        {% endblock %}
        {% block body %}
            {% include molecule('summary-overview', 'CheckoutPage') with {
                data: embed.overview,
            } only %}

            {% set QuoteApproveRequestWidget = findWidget('QuoteApproveRequestWidget', [embed.cart]) %}
            {% if QuoteApproveRequestWidget and QuoteApproveRequestWidget.isVisible %}
                {% widget 'QuoteApproveRequestWidget' args [embed.cart] %}
                    {% block body %}
                        <div class="box">
                            {{ parent() }}
                        </div>
                    {% endblock %}
                {% endwidget %}
            {% endif %}

            {% set quoteApprovalWidget = findWidget('QuoteApprovalWidget', [embed.cart]) %}
            {% if quoteApprovalWidget and quoteApprovalWidget.isVisible %}
                <div class="box">
                    {% widget 'QuoteApprovalWidget' args [embed.cart] only %}{% endwidget %}
                </div>
            {% endif %}

            {{ parent() }}

            {% if embed.isPlaceableOrderErrors is not empty %}
                <hr>
                <ul class="list list--alert">
                    {% for error in embed.isPlaceableOrderErrors %}
                        <li class="list__item">{{ error.message | trans(error.parameters) }}</li>
                    {% endfor %}
                </ul>
            {% endif %}
        {% endblock %}
    {% endembed %}
{% endblock %}
