name: 'CI'

on:
  pull_request:
  push:
    branches:
      - master
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"

env:
  APPLICATION_ENV: ci.pgsql
  SPRYKER_TESTING_ENABLED: 1
  APPLICATION_STORE: DE
  PROJECT: suite
  POSTGRES_PORT: 5433
  POSTGRES_USER: postgres
  POSTGRES_DB: DE_test_zed
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  MYSQL_USER: root
  MYSQL_DATABASE: DE_test_zed

jobs:
  validation-7-4:
    name: 'Static analysis / PHP 7.4'
    runs-on: ubuntu-18.04
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          ini-values: memory_limit=-1
      - name: 'Configure sysctl limits'
        run: |
          sudo swapoff -a
          sudo sysctl -w vm.swappiness=1
          sudo sysctl -w fs.file-max=262144
          sudo sysctl -w vm.max_map_count=262144

      - name: 'Runs Elasticsearch'
        uses: elastic/elastic-github-actions/elasticsearch@master
        with:
          stack-version: 6.8.0
      - name: 'Prepare code base'
        run: ./config/Shared/ci/ga/prepare_for_validation.sh
      - name: 'Test'
        run: ./config/Shared/ci/ga/validate.sh

  acceptance-7-4:
    name: 'Acceptance tests / PostgreSQL / PHP 7.4'
    runs-on: ubuntu-18.04
    services:
      rabbitmq:
        image: rabbitmq
        ports:
          - 5672:5672
      redis:
        image: redis
        ports:
          - 6379:6379
      postgres:
        image: postgres:12
        env:
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          extensions: redis
          ini-values: memory_limit=-1
      - name: 'Configure sysctl limits'
        run: |
          sudo swapoff -a
          sudo sysctl -w vm.swappiness=1
          sudo sysctl -w fs.file-max=262144
          sudo sysctl -w vm.max_map_count=262144
      - name: 'Runs Elasticsearch'
        uses: elastic/elastic-github-actions/elasticsearch@master
        with:
          stack-version: 6.8.0
      - name: 'Prepare file system'
        run: ./config/Shared/ci/ga/prepare_file_system.sh
      - name: 'Configure acceptance env'
        run: config/Shared/ci/ga/acceptance_env.sh
      - name: 'Install project'
        run: vendor/bin/install DE -r ci
      - name: 'Run phantomjs'
        run: timeout 45m bash -c "vendor/bin/phantomjs --webdriver=4444 --disk-cache=true --load-images=false --webdriver-logfile=/tmp/phantomjs.log --webdriver-loglevel=DEBUG">/dev/null &
      - name: 'Run tests'
        env:
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: vendor/bin/codecept run -g EndToEnd -g Presentation -x DockerOnly --ext DotReporter

  without-acceptance-7-4:
    name: 'Without acceptance tests / PostgreSQL / PHP 7.4'
    runs-on: ubuntu-18.04
    services:
      rabbitmq:
        image: rabbitmq
        ports:
          - 5672:5672
      redis:
        image: redis
        ports:
          - 6379:6379
      postgres:
        image: postgres:12
        env:
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          extensions: redis
          ini-values: memory_limit=-1
      - name: 'Configure sysctl limits'
        run: |
          sudo swapoff -a
          sudo sysctl -w vm.swappiness=1
          sudo sysctl -w fs.file-max=262144
          sudo sysctl -w vm.max_map_count=262144
      - name: 'Run Elasticsearch'
        uses: elastic/elastic-github-actions/elasticsearch@master
        with:
          stack-version: 6.8.0
      - name: 'Prepare file system'
        run: ./config/Shared/ci/ga/prepare_file_system.sh
      - name: 'Install project'
        run: vendor/bin/install DE -r ci -x frontend -x fixtures
      - name: 'Run tests'
        run: vendor/bin/codecept run -x EndToEnd -x Presentation --ext DotReporter

  acceptance-7-2-mariadb:
    name: 'Acceptance tests / PHP 7.2'
    runs-on: ubuntu-18.04
    env:
      APPLICATION_ENV: ci.mysql
      DB_ENGINE: mysql
    services:
      rabbitmq:
        image: rabbitmq
        ports:
          - 5672:5672
      redis:
        image: redis
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v2
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '7.2'
          extensions: redis
          ini-values: memory_limit=-1
      - uses: getong/mariadb-action@v1.1
        with:
          character set server: 'utf8'
          collation server: 'utf8_general_ci'
          mariadb version: '10.3'
          mysql database: ${{ env.MYSQL_DATABASE }}
          mysql root password: ${{ secrets.DB_PASSWORD }}
      - name: 'Configure sysctl limits'
        run: |
          sudo swapoff -a
          sudo sysctl -w vm.swappiness=1
          sudo sysctl -w fs.file-max=262144
          sudo sysctl -w vm.max_map_count=262144
      - name: 'Runs Elasticsearch'
        uses: elastic/elastic-github-actions/elasticsearch@master
        with:
          stack-version: 6.8.0
      - name: 'Prepare file system'
        run: ./config/Shared/ci/ga/prepare_file_system.sh
      - name: 'Install project'
        run: vendor/bin/install DE -r ci
      - name: 'Configure acceptance env'
        run: config/Shared/ci/ga/acceptance_env.sh
      - name: 'Run phantomjs'
        run: timeout 45m bash -c "vendor/bin/phantomjs --webdriver=4444 --disk-cache=true --load-images=false --webdriver-logfile=/tmp/phantomjs.log --webdriver-loglevel=DEBUG">/dev/null &
      - name: 'Run tests'
        env:
          MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: vendor/bin/codecept run -g EndToEnd -g Presentation -x DockerOnly --ext DotReporter

  without-acceptance-7-2-mariadb:
    name: 'Without acceptance tests / PHP 7.2'
    runs-on: ubuntu-18.04
    env:
      APPLICATION_ENV: ci.mysql
    services:
      rabbitmq:
        image: rabbitmq
        ports:
          - 5672:5672
      redis:
        image: redis
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v2
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '7.2'
          extensions: redis
          ini-values: memory_limit=-1
      - uses: getong/mariadb-action@v1.1
        with:
          character set server: 'utf8'
          collation server: 'utf8_general_ci'
          mariadb version: '10.3'
          mysql database: ${{ env.MYSQL_DATABASE }}
          mysql root password: ${{ secrets.DB_PASSWORD }}
      - name: 'Configure sysctl limits'
        run: |
          sudo swapoff -a
          sudo sysctl -w vm.swappiness=1
          sudo sysctl -w fs.file-max=262144
          sudo sysctl -w vm.max_map_count=262144
      - name: 'Runs Elasticsearch'
        uses: elastic/elastic-github-actions/elasticsearch@master
        with:
          stack-version: 6.8.0
      - name: 'Prepare file system'
        run: ./config/Shared/ci/ga/prepare_file_system.sh
      - name: 'Install project'
        run: vendor/bin/install DE -r ci -x frontend -x fixtures
      - name: 'Run tests'
        run: vendor/bin/codecept run -x EndToEnd -x Presentation --ext DotReporter

  functional-via-docker-alpine-php-7-4-postresql:
    name: "Docker / Alpine / PHP 7.4 / PostgreSQL / Functional"
    runs-on: ubuntu-18.04
    env:
      PROGRESS_TYPE: plain
      SPRYKER_PLATFORM_IMAGE: spryker/php:7.4-alpine3.12
    steps:
      - uses: actions/checkout@v2
      - run: echo eyAiZXhwZXJpbWVudGFsIiA6IHRydWUsICJmZWF0dXJlcyIgOiB7ICJidWlsZGtpdCI6IHRydWUgfSB9Cg==|base64 -d|sudo tee /etc/docker/daemon.json
      - run: sudo apt-get install --only-upgrade docker -y
      - run: sudo curl -L "https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
      - run: sudo chmod +x /usr/local/bin/docker-compose
      - run: git clone https://github.com/spryker/docker-sdk.git --single-branch --branch master ./docker
      - run: docker/sdk boot deploy.ci.functional.yml -v
      - run: docker/sdk up -t -v
      - run: docker/sdk testing codecept run -c codeception.ci.functional.yml

  functional-via-docker-debian-php-7-3-postgress:
    name: "Docker / Debian / PHP 7.3 / PostgreSQL / Functional"
    runs-on: ubuntu-18.04
    env:
      PROGRESS_TYPE: plain
      SPRYKER_PLATFORM_IMAGE: spryker/php:7.3-debian
    steps:
      - uses: actions/checkout@v2
      - run: echo eyAiZXhwZXJpbWVudGFsIiA6IHRydWUsICJmZWF0dXJlcyIgOiB7ICJidWlsZGtpdCI6IHRydWUgfSB9Cg==|base64 -d|sudo tee /etc/docker/daemon.json
      - run: sudo apt-get install --only-upgrade docker -y
      - run: sudo curl -L "https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
      - run: sudo chmod +x /usr/local/bin/docker-compose
      - run: git clone https://github.com/spryker/docker-sdk.git --single-branch --branch master ./docker
      - run: docker/sdk boot deploy.ci.functional.yml -v
      - run: docker/sdk up -t -v
      - run: docker/sdk testing codecept run -c codeception.ci.functional.yml

  functional-via-docker-alpine-php-7-3-mariadb:
    name: "Docker / Alpine / PHP 7.3 / MariaDB / Functional"
    runs-on: ubuntu-18.04
    env:
      PROGRESS_TYPE: plain
      SPRYKER_PLATFORM_IMAGE: spryker/php:7.3-alpine3.12
    steps:
      - uses: actions/checkout@v2
      - run: echo eyAiZXhwZXJpbWVudGFsIiA6IHRydWUsICJmZWF0dXJlcyIgOiB7ICJidWlsZGtpdCI6IHRydWUgfSB9Cg==|base64 -d|sudo tee /etc/docker/daemon.json
      - run: sudo apt-get install --only-upgrade docker -y
      - run: sudo curl -L "https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
      - run: sudo chmod +x /usr/local/bin/docker-compose
      - run: git clone https://github.com/spryker/docker-sdk.git --single-branch --branch master ./docker
      - run: docker/sdk boot deploy.ci.functional.mariadb.yml -v
      - run: docker/sdk up -t -v
      - run: docker/sdk testing codecept run -c codeception.ci.functional.yml

  frontend-assets-via-docker-php-7-4:
    name: "Docker / Alpine / PHP 7.4 / Frontend & Assets"
    runs-on: ubuntu-18.04
    env:
      PROGRESS_TYPE: plain
      SPRYKER_PLATFORM_IMAGE: spryker/php:7.3-alpine3.12
    steps:
      - uses: actions/checkout@v2
      - run: echo eyAiZXhwZXJpbWVudGFsIiA6IHRydWUsICJmZWF0dXJlcyIgOiB7ICJidWlsZGtpdCI6IHRydWUgfSB9Cg==|base64 -d|sudo tee /etc/docker/daemon.json
      - run: sudo apt-get install --only-upgrade docker -y
      - run: sudo curl -L "https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
      - run: sudo chmod +x /usr/local/bin/docker-compose
      - run: git clone https://github.com/spryker/docker-sdk.git --single-branch --branch master ./docker
      - run: docker/sdk boot deploy.yml
      - run: SPRYKER_BUILD_HASH=myhash docker/sdk export images
      - run: docker run -t --rm -e SPRYKER_NGINX_CGI_HOST_YVES_EU=localhost -e SPRYKER_NGINX_CGI_HOST_ZED_EU=localhost -e SPRYKER_NGINX_CGI_HOST_GLUE_EU=localhost -e SPRYKER_NGINX_CGI_HOST_YVES_US=localhost -e SPRYKER_NGINX_CGI_HOST_GLUE_US=localhost -e SPRYKER_NGINX_CGI_HOST_ZED_US=localhost -e ALLOWED_IP=127.0.0.1 spryker_b2b_frontend:1.0-frontend nginx -t
      - run: docker run -t --rm --entrypoint='' spryker_b2b_frontend:1.0-frontend ls -al /data/public/Yves/assets/myhash
      - run: docker run -t --rm --entrypoint='' spryker_b2b_frontend:1.0-frontend ls -al /data/public/Zed/assets/
